// @import "~bootstrap/scss/bootstrap";

// /* eslint-disable no-undef */
// // require('dotenv').config();
// // const path = require('path');
// // const Dotenv = require('dotenv-webpack');
// // const HtmlWebpackPlugin = require('html-webpack-plugin');
// // const MiniCssExtractPlugin = require('mini-css-extract-plugin');
// // const TerserPlugin = require('terser-webpack-plugin');
// // const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');

// // // let isDevelopment = false;

// // // if (['staging', 'review', 'production'].includes(process.env.NODE_ENV)) {
// // //   isDevelopment = false;
// // // } else isDevelopment = true;

// // module.exports = (env, argv) => {
// //   let isDevelopment = false;
// //   if (['staging', 'review', 'production'].includes(argv.mode)) {
// //     isDevelopment = false;
// //   } else isDevelopment = true;

// //   return {
// //     entry: path.join(__dirname, 'src', 'App.js'),
// //     output: {
// //       path: path.join(__dirname, 'dist'),
// //       filename: 'app.bundle.js',
// //     },
// //     module: {
// //       rules: [
// //         {
// //           test: /\.(js|jsx)$/,
// //           exclude: /node_modules/,
// //           use: {
// //             loader: 'babel-loader',
// //             options: {
// //               sourceMap: isDevelopment,
// //             },
// //           },
// //         },
// //         {
// //           test: /\.s(a|c)ss$/,
// //           use: [
// //             isDevelopment ? 'style-loader' : MiniCssExtractPlugin.loader,
// //             'css-loader',
// //             {
// //               loader: 'sass-loader',
// //               options: {
// //                 sourceMap: isDevelopment,
// //               },
// //             },
// //           ],
// //         },
// //         {
// //           test: /\.css$/,
// //           use: [
// //             {
// //               loader: MiniCssExtractPlugin.loader,
// //             },
// //             'css-loader',
// //           ],
// //         },
// //         {
// //           test: /\.(png|jpe?g|gif|otf|ttf|svg)$/,
// //           use: [
// //             {
// //               loader: 'file-loader',
// //               options: {},
// //             },
// //           ],
// //         },
// //       ],
// //     },
// //     resolve: {
// //       extensions: ['.js', '.jsx', '.scss'],
// //     },
// //     devServer: {
// //       contentBase: path.join(__dirname, 'src'),
// //       watchContentBase: true,
// //     },
// //     plugins: [
// //       new Dotenv(),
// //       new HtmlWebpackPlugin({
// //         template: path.join(__dirname, 'src', 'index.html'),
// //       }),
// //       new MiniCssExtractPlugin({
// //         filename: isDevelopment ? '[name].css' : '[name].[hash].css',
// //         chunkFilename: isDevelopment ? '[id].css' : '[id].[hash].css',
// //       }),
// //     ],
// //     optimization: {
// //       minimizer: [new TerserPlugin(), new OptimizeCSSAssetsPlugin({})],
// //     },
// //   };
// // };
// const path = require('path');
// // const webpack = require('webpack');
// const  HtmlWebpackPlugin = require ('html-webpack-plugin');
// const MiniCssExtractPlugin = require('mini-css-extract-plugin');
// const Dotenv = require('dotenv-webpack');

// // dotenv.config();

// module.exports = {
//   mode: "development", // "production" | "development" | "none"
//   // Chosen mode tells webpack to use its built-in optimizations accordingly.
//   entry: path.resolve(__dirname, "src", 'index.jsx'), // string | object | array
//   output: {
//     // options related to how webpack emits results
//     path: path.resolve(__dirname, "../dist"), // string
//     filename: "bundle.js", // string
//     publicPath: '/'
//     },
//   module: {
//     // configuration regarding modules
//     rules: [
//       // rules for modules (configure loaders, parser options, etc.)
//       {
//         test: /\.jsx?$/,
//         exclude: /node_modules/,
//         use: ['babel-loader'],
//       },
//       {
//         test: /\.html$/,
//         use: [
//           // apply multiple loaders and options
//           "htmllint-loader",
//           {
//             loader: "html-loader",
//           }
//         ]
//       },
//       {
//         test: /\.(sa|sc|c)ss$/,
//         use: [MiniCssExtractPlugin.loader,'css-loader', 'postcss-loader','sass-loader']
//       },
//       {
//         test: /\.jsx?$/,
//         exclude: /node_modules/,
//         loader: 'eslint-loader',
//         options: {
//           // eslint options (if necessary)
//         },
//       },
//       {
//         test: /\.css$/i,
//         use: ['style-loader', 'css-loader'],
//       },
//     ],
//   },
//   devServer: {
//     historyApiFallback: true,
//   },  
//   plugins: [
//     new Dotenv(),

//     new HtmlWebpackPlugin({ 
//       template: './src/index.html',
//       filename: './index.html'
//     }),
//     new MiniCssExtractPlugin({
//       // Options similar to the same options in webpackOptions.output
//       // both options are optional
//       filename: 'app.css',
//       chunkFilename: '[id].css'
//     }),
//   ],
// }